{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Abhay\\\\Desktop\\\\trelloclone\\\\trello\\\\screens\\\\ListBoard.js\";\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Boards from \"../components/Boards\";\nimport AddBoards from \"../screens/AddBoard\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nfunction HomeScreen(_ref) {\n  var navigation = _ref.navigation;\n  return React.createElement(SafeAreaView, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    }\n  }, React.createElement(Button, {\n    title: \"Add Board\",\n    onPress: function onPress() {\n      return navigation.navigate('MyModal');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    }\n  }), React.createElement(Boards, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    }\n  }));\n}\n\nfunction ModalScreen(_ref2) {\n  var navigation = _ref2.navigation;\n  return React.createElement(View, {\n    style: {\n      height: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    }\n  }, React.createElement(AddBoards, {\n    nav: function nav() {\n      return navigation.navigate('Main');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    }\n  }));\n}\n\nvar RootStack = createStackNavigator();\n\nvar ListBoard = function ListBoard() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      curUser = _useState2[0],\n      setcurUser = _useState2[1];\n\n  var _retrieveData = function _retrieveData() {\n    var value, c;\n    return _regeneratorRuntime.async(function _retrieveData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('loginID'));\n\n          case 3:\n            value = _context.sent;\n\n            if (value !== null) {\n              c = Object.create(null);\n              c = [value];\n              setcurUser(c);\n              console.log(c);\n              handleCreateBoard();\n            }\n\n            _context.next = 9;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  var loadBoards = function loadBoards() {\n    var url = 'http://127.0.0.1:8000/api/getboards/';\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        authors: {\n          curUser: curUser\n        }['curUser']\n      }),\n      credentials: 'same-origin'\n    }).then(function (response) {\n      if (response.status === 403) {\n        console.log('Authentication error...');\n      }\n\n      console.log(response);\n      return response.json();\n    }).then(function (responseJson) {\n      console.log(responseJson);\n      return responseJson;\n    }).catch(function (error) {\n      var message = 'Error saving new bookmark.';\n      console.log(error);\n    });\n  };\n\n  return React.createElement(RootStack.Navigator, {\n    mode: \"card\",\n    headerMode: \"none\",\n    screenOptions: {\n      headerShown: false\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    }\n  }, React.createElement(RootStack.Screen, {\n    name: \"Main\",\n    component: HomeScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    }\n  }), React.createElement(RootStack.Screen, {\n    name: \"MyModal\",\n    component: ModalScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});\nexport default ListBoard;","map":{"version":3,"sources":["C:/Users/Abhay/Desktop/trelloclone/trello/screens/ListBoard.js"],"names":["React","Boards","AddBoards","NavigationContainer","createStackNavigator","HomeScreen","navigation","styles","container","navigate","ModalScreen","height","RootStack","ListBoard","useState","curUser","setcurUser","_retrieveData","AsyncStorage","getItem","value","c","Object","create","console","log","handleCreateBoard","loadBoards","url","fetch","method","headers","Accept","body","JSON","stringify","authors","credentials","then","response","status","json","responseJson","catch","error","message","headerShown","StyleSheet","flex"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Text, View, StyleSheet, ScrollView, SafeAreaView, Button, Modal } from 'react-native';\r\nimport Boards from '../components/Boards'\r\nimport AddBoards from '../screens/AddBoard'\r\nimport { AsyncStorage } from 'react-native';\r\n\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\n\r\n\r\nfunction HomeScreen({ navigation }) {\r\n    return (\r\n        <SafeAreaView style={styles.container}>\r\n            <Button title=\"Add Board\" onPress={() => navigation.navigate('MyModal')} />\r\n            <Boards />\r\n\r\n        </SafeAreaView>\r\n    );\r\n}\r\n\r\nfunction ModalScreen({ navigation }) {\r\n    return (\r\n        <View style={{ height: '100%', }}>\r\n            <AddBoards nav={() => navigation.navigate('Main')} />\r\n        </View>\r\n    );\r\n}\r\nconst RootStack = createStackNavigator();\r\n\r\nconst ListBoard = () => {\r\n\r\n    const [curUser, setcurUser] = useState([]);\r\n\r\n    const _retrieveData = async () => {\r\n\r\n        try {\r\n            const value = await AsyncStorage.getItem('loginID');\r\n            if (value !== null) {\r\n                // We have data!!\r\n                let c = Object.create(null);\r\n                c = [value];\r\n                setcurUser(c);\r\n                console.log(c);\r\n                handleCreateBoard();\r\n            }\r\n\r\n        } catch (error) {\r\n            // Error retrieving data\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const loadBoards = () => {\r\n        let url = 'http://127.0.0.1:8000/api/getboards/';\r\n\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                authors: { curUser }['curUser']\r\n            }),\r\n            credentials: 'same-origin',\r\n        }).then((response) => {\r\n            if (response.status === 403) {\r\n                console.log('Authentication error...');\r\n\r\n                // this.setState({currentMessage: 'Authentication error.'});\r\n            }\r\n            console.log(response);\r\n            //handleClick();\r\n            return response.json()\r\n        }).then((responseJson) => {\r\n            //let jobj = JSON.parse(responseJson);\r\n            console.log(responseJson);\r\n            \r\n            return responseJson;\r\n        }).catch((error) => {\r\n            let message = 'Error saving new bookmark.';\r\n            //this.setState({'currentMessage': message + \"\\n\" + error});\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <RootStack.Navigator mode=\"card\" headerMode=\"none\" screenOptions={{ headerShown: false }}>\r\n            <RootStack.Screen name=\"Main\" component={HomeScreen} />\r\n            <RootStack.Screen name=\"MyModal\" component={ModalScreen} />\r\n        </RootStack.Navigator>\r\n\r\n    );\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n    },\r\n\r\n});\r\nexport default ListBoard\r\n\r\n"]},"metadata":{},"sourceType":"module"}